// Firestore Security Rules für Reference-System
// Diese Rules müssen in die bestehenden firestore.rules integriert werden

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // JOURNALIST REFERENCES (Neue Collection)
    // ========================================

    // References werden in der Organisation des Kunden gespeichert
    match /organizations/{orgId}/journalist_references/{referenceId} {

      // LESEN: Nur Mitglieder der Organisation
      allow read: if request.auth != null
                  && request.auth.token.organizationId == orgId;

      // ERSTELLEN: Nur Mitglieder der Organisation
      allow create: if request.auth != null
                    && request.auth.token.organizationId == orgId
                    && validateReferenceCreate(resource.data);

      // AKTUALISIEREN: Nur lokale Daten (Notes, Tags)
      allow update: if request.auth != null
                    && request.auth.token.organizationId == orgId
                    && validateReferenceUpdate(resource.data, request.resource.data);

      // LÖSCHEN: Nur eigene References (Soft-Delete bevorzugt)
      allow delete: if request.auth != null
                    && request.auth.token.organizationId == orgId;
    }

    // ========================================
    // GLOBALE JOURNALISTEN (Erweiterte Rules)
    // ========================================

    // Globale Kontakte - READ für alle, WRITE nur für SuperAdmin
    match /contacts_enhanced/{contactId} {

      // LESEN: Alle authentifizierten User können globale Kontakte sehen
      allow read: if request.auth != null
                  && resource.data.isGlobal == true;

      // SCHREIBEN: Nur SuperAdmin Organisation
      allow write: if request.auth != null
                   && request.auth.token.organizationId == "superadmin-org"
                   && validateGlobalJournalist(request.resource.data);
    }

    // ========================================
    // VALIDATION FUNCTIONS
    // ========================================

    // Validiert das Erstellen einer Reference
    function validateReferenceCreate(data) {
      return data.keys().hasAll(['organizationId', 'globalJournalistId', 'addedAt', 'addedBy', 'isActive'])
             && data.organizationId is string
             && data.globalJournalistId is string
             && data.addedBy is string
             && data.isActive == true
             && (!('localNotes' in data) || data.localNotes is string)
             && (!('localTags' in data) || data.localTags is list);
    }

    // Validiert das Update einer Reference (nur lokale Daten)
    function validateReferenceUpdate(before, after) {
      return // Unveränderliche Felder
             after.organizationId == before.organizationId
             && after.globalJournalistId == before.globalJournalistId
             && after.addedAt == before.addedAt
             && after.addedBy == before.addedBy
             // Nur lokale Felder dürfen geändert werden
             && (!('localNotes' in after) || after.localNotes is string)
             && (!('localTags' in after) || after.localTags is list)
             && (!('customLabel' in after) || after.customLabel is string);
    }

    // Validiert globale Journalisten
    function validateGlobalJournalist(data) {
      return data.isGlobal == true
             && data.displayName is string
             && data.organizationId is string
             && ('mediaProfile' in data ? data.mediaProfile.isJournalist == true : true);
    }

    // ========================================
    // HELPER FUNCTIONS
    // ========================================

    // Prüft ob User SuperAdmin ist
    function isSuperAdmin() {
      return request.auth != null
             && request.auth.token.organizationId == "superadmin-org";
    }

    // Prüft ob User zur Organisation gehört
    function belongsToOrg(orgId) {
      return request.auth != null
             && request.auth.token.organizationId == orgId;
    }

    // Prüft ob User Premium-Features nutzen darf
    function canUseReferences() {
      // TODO: Implement subscription check
      return request.auth != null;
    }
  }
}