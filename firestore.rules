rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // HELPER FUNCTIONS
    // ========================================

    // Prüft ob User authentifiziert ist
    function isAuthenticated() {
      return request.auth != null;
    }

    // Prüft ob User SuperAdmin ist (für Cron Jobs und Admin-Funktionen)
    function isSuperAdmin() {
      return request.auth != null
             && (request.auth.token.organizationId == "superadmin-org"
                 || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == "superadmin-org");
    }

    // Prüft ob User zur Organisation gehört
    function belongsToOrg(orgId) {
      return request.auth != null
             && request.auth.token.organizationId == orgId;
    }

    // ========================================
    // GLOBALE JOURNALISTEN (Enhanced CRM)
    // ========================================

    // Globale Kontakte - Nur SuperAdmin (für Cron Jobs & Admin)
    match /contacts_enhanced/{contactId} {
      allow read, write: if isSuperAdmin();
    }

    // ========================================
    // JOURNALIST REFERENCES
    // ========================================

    // References - Org-Mitglieder oder SuperAdmin
    match /organizations/{orgId}/journalist_references/{referenceId} {
      allow read: if belongsToOrg(orgId) || isSuperAdmin();
      allow create: if belongsToOrg(orgId) || isSuperAdmin();
      allow update: if belongsToOrg(orgId) || isSuperAdmin();
      allow delete: if belongsToOrg(orgId) || isSuperAdmin();
    }

    // ========================================
    // MATCHING SYSTEM
    // ========================================

    // Matching-Kandidaten - Nur SuperAdmin (Cron Jobs)
    match /matching_candidates/{candidateId} {
      allow read, write: if isSuperAdmin();
    }

    // Matching Scan-Jobs - Nur SuperAdmin (Cron Jobs)
    match /matching_scan_jobs/{jobId} {
      allow read, write: if isSuperAdmin();
    }

    // System Settings - Lesen: Auth, Schreiben: SuperAdmin
    match /system_settings/{docId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }

    // ========================================
    // ORGANIZATIONS
    // ========================================

    // Organizations Root - Lesen: Alle Auth, Schreiben: Org-Member oder SuperAdmin
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow write: if belongsToOrg(orgId) || isSuperAdmin();
    }

    // Organizations Sub-Collections - Org-Member oder SuperAdmin
    match /organizations/{orgId}/{collection}/{docId} {
      allow read: if belongsToOrg(orgId) || isSuperAdmin();
      allow write: if belongsToOrg(orgId) || isSuperAdmin();
    }

    // Organizations Deep Sub-Collections (z.B. contacts_enhanced)
    match /organizations/{orgId}/{collection}/{docId}/{subcollection}/{subdocId} {
      allow read: if belongsToOrg(orgId) || isSuperAdmin();
      allow write: if belongsToOrg(orgId) || isSuperAdmin();
    }

    // ========================================
    // PUBLICATIONS & MEDIA
    // ========================================

    // Publikationen in der Bibliothek - Lesen: Alle, Schreiben: SuperAdmin
    match /publications/{pubId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }

    // SuperAdmin Publications - Nur SuperAdmin
    match /superadmin_publications/{pubId} {
      allow read, write: if isSuperAdmin();
    }

    // Companies Enhanced - Lesen: Alle, Schreiben: SuperAdmin
    match /companies_enhanced/{companyId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }

    // ========================================
    // LEGACY COLLECTIONS
    // ========================================

    // Legacy Companies - Org-basiert oder SuperAdmin
    match /companies/{companyId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Legacy Contacts - Org-basiert oder SuperAdmin
    match /contacts/{contactId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Tags - User-basiert
    match /tags/{tagId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // ========================================
    // USER DATA
    // ========================================

    // Users Collection - Nur eigener User oder SuperAdmin
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isSuperAdmin();
      allow write: if request.auth.uid == userId || isSuperAdmin();
    }

    // ========================================
    // MONITORING SYSTEM
    // ========================================

    // Campaign Monitoring Trackers
    match /campaign_monitoring_trackers/{trackerId} {
      allow read: if isAuthenticated()
                  && (resource.data.organizationId == request.auth.token.organizationId
                      || isSuperAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated()
                    && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Monitoring Suggestions
    match /monitoring_suggestions/{suggestionId} {
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated()
                    && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Spam Patterns
    match /spam_patterns/{patternId} {
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      allow create, update, delete: if isAuthenticated()
                                    && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Media Clippings
    match /media_clippings/{clippingId} {
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Email Campaign Sends
    match /email_campaign_sends/{sendId} {
      // Lesen: Authentifizierte User ihrer Org
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      // Erstellen: Authentifizierte User
      allow create: if isAuthenticated();
      // Update: Authentifizierte User ihrer Org
      allow update: if isAuthenticated()
                    && resource.data.organizationId == request.auth.token.organizationId;
      // Löschen: Authentifizierte User ihrer Org
      allow delete: if isAuthenticated()
                    && resource.data.organizationId == request.auth.token.organizationId;
    }

    // ========================================
    // TASKS SYSTEM
    // ========================================

    // Tasks Collection - Org-Member Zugriff
    match /tasks/{taskId} {
      // Lesen: Nur Tasks der eigenen Organisation
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;

      // Erstellen: Nur für eigene Organisation
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;

      // Update & Löschen: Nur Tasks der eigenen Organisation
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // ========================================
    // MEDIA & DOCUMENTS (Strategie-Tab)
    // ========================================

    // Media Folders - Org-isoliert
    match /media_folders/{folderId} {
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Media Assets - Org-isoliert
    match /media_assets/{assetId} {
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Document Contents (Strategiedokumente & Tabellen) - Org-isoliert
    match /documentContent/{docId} {
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // ========================================
    // DISTRIBUTION LISTS (Verteiler-Tab)
    // ========================================

    // Master Distribution Lists - Org-isoliert mit Legacy-Fallback
    match /distribution_lists/{listId} {
      // Lesen: Nur eigene Organisation oder Legacy userId
      allow read: if isAuthenticated()
                  && (resource.data.organizationId == request.auth.token.organizationId
                      || resource.data.userId == request.auth.uid);

      // Erstellen: Nur für eigene Organisation
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;

      // Update & Löschen: Nur eigene Organisation oder Legacy userId
      allow update, delete: if isAuthenticated()
                            && (resource.data.organizationId == request.auth.token.organizationId
                                || resource.data.userId == request.auth.uid);
    }

    // Project Distribution Lists - Org-isoliert
    match /project_distribution_lists/{listId} {
      // Lesen: Nur eigene Organisation
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;

      // Erstellen: Nur für eigene Organisation
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;

      // Update & Löschen: Nur eigene Organisation
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // List Usage Tracking - Authentifizierte User können tracken
    match /list_usage/{usageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // List Metrics - Org-isoliert
    match /list_metrics/{metricId} {
      allow read: if isAuthenticated()
                  && (resource.data.organizationId == request.auth.token.organizationId
                      || resource.data.userId == request.auth.uid);
      allow write: if isAuthenticated()
                   && (request.resource.data.organizationId == request.auth.token.organizationId
                       || request.resource.data.userId == request.auth.uid);
    }

    // ========================================
    // PR CAMPAIGNS & APPROVALS (Pressemeldungen-Tab)
    // ========================================

    // PR Campaigns - Org-isoliert
    match /pr_campaigns/{campaignId} {
      // Lesen: Nur eigene Organisation
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;

      // Erstellen: Nur für eigene Organisation
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;

      // Update & Löschen: Nur eigene Organisation
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // Approvals - Org-isoliert
    match /approvals/{approvalId} {
      // Lesen: Nur eigene Organisation
      allow read: if isAuthenticated()
                  && resource.data.organizationId == request.auth.token.organizationId;

      // Erstellen: Nur für eigene Organisation
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;

      // Update & Löschen: Nur eigene Organisation
      allow update, delete: if isAuthenticated()
                            && resource.data.organizationId == request.auth.token.organizationId;
    }

    // PR Approval Shares - Öffentlich lesbar per shareId, schreiben nur Org-Member
    match /pr_approval_shares/{shareId} {
      // Lesen: Öffentlich (für Kunden-Freigabe-Seite)
      allow read: if true;

      // Erstellen & Update: Nur eigene Organisation
      allow create: if isAuthenticated()
                    && request.resource.data.organizationId == request.auth.token.organizationId;
      allow update: if isAuthenticated()
                    && resource.data.organizationId == request.auth.token.organizationId;

      // Löschen: Nur eigene Organisation
      allow delete: if isAuthenticated()
                    && resource.data.organizationId == request.auth.token.organizationId;
    }

    // ========================================
    // DEFAULT FALLBACK
    // ========================================

    // Fallback: Nur authenticated users
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}
